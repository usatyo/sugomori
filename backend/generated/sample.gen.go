// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ApiResponse defines model for ApiResponse.
type ApiResponse struct {
	Code    *int32  `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// Joseki defines model for Joseki.
type Joseki struct {
	Id      *int64   `json:"id,omitempty"`
	Stones  *[]Stone `json:"stones,omitempty"`
	VideoId *string  `json:"videoId,omitempty"`
}

// Stone defines model for Stone.
type Stone struct {
	Color *bool  `json:"color,omitempty"`
	X     *int64 `json:"x,omitempty"`
	Y     *int64 `json:"y,omitempty"`
}

// GetJosekiParams defines parameters for GetJoseki.
type GetJosekiParams struct {
	// VideoId videoId for joseki
	VideoId string `form:"videoId" json:"videoId"`
}

// PutJosekiRegisterParams defines parameters for PutJosekiRegister.
type PutJosekiRegisterParams struct {
	// Stones register joseki
	Stones []Stone `form:"stones" json:"stones"`
}

// GetVideoParams defines parameters for GetVideo.
type GetVideoParams struct {
	// Stones searching joseki
	Stones []Stone `form:"stones" json:"stones"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /joseki)
	GetJoseki(ctx echo.Context, params GetJosekiParams) error

	// (PUT /joseki/register)
	PutJosekiRegister(ctx echo.Context, params PutJosekiRegisterParams) error

	// (GET /video)
	GetVideo(ctx echo.Context, params GetVideoParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetJoseki converts echo context to params.
func (w *ServerInterfaceWrapper) GetJoseki(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetJosekiParams
	// ------------- Required query parameter "videoId" -------------

	err = runtime.BindQueryParameter("form", true, true, "videoId", ctx.QueryParams(), &params.VideoId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter videoId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetJoseki(ctx, params)
	return err
}

// PutJosekiRegister converts echo context to params.
func (w *ServerInterfaceWrapper) PutJosekiRegister(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PutJosekiRegisterParams
	// ------------- Required query parameter "stones" -------------

	err = runtime.BindQueryParameter("form", true, true, "stones", ctx.QueryParams(), &params.Stones)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter stones: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutJosekiRegister(ctx, params)
	return err
}

// GetVideo converts echo context to params.
func (w *ServerInterfaceWrapper) GetVideo(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVideoParams
	// ------------- Required query parameter "stones" -------------

	if paramValue := ctx.QueryParam("stones"); paramValue != "" {

		var value []Stone
		err = json.Unmarshal([]byte(paramValue), &value)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, "Error unmarshaling parameter 'stones' as JSON")
		}
		params.Stones = value

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument stones is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetVideo(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/joseki", wrapper.GetJoseki)
	router.PUT(baseURL+"/joseki/register", wrapper.PutJosekiRegister)
	router.GET(baseURL+"/video", wrapper.GetVideo)

}
